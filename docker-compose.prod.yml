version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: deepfake-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${DATABASE_NAME:-deepfake_detection}
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - deepfake-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ping: 1})"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    image: ${DOCKER_USERNAME:-deepfake}/deepfake-backend:latest
    container_name: deepfake-backend
    restart: unless-stopped
    environment:
      - MONGODB_URL=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/${DATABASE_NAME:-deepfake_detection}?authSource=admin
      - DATABASE_NAME=${DATABASE_NAME:-deepfake_detection}
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - CORS_ORIGINS=["http://localhost:3000", "https://yourdomain.com"]
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-104857600}
      - UPLOAD_DIR=/app/uploads
      - MODEL_CACHE_DIR=/app/ml_models
      - HUGGINGFACE_CACHE_DIR=/app/cache
    volumes:
      - uploads_data:/app/uploads
      - ml_models_data:/app/ml_models
      - cache_data:/app/cache
    ports:
      - "8000:8000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - deepfake-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    image: ${DOCKER_USERNAME:-deepfake}/deepfake-frontend:latest
    container_name: deepfake-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - deepfake-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: deepfake-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - deepfake-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: deepfake-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - deepfake-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: deepfake-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - deepfake-network

  # Redis Cache (Optional)
  redis:
    image: redis:alpine
    container_name: deepfake-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - deepfake-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker (Optional - for background tasks)
  celery-worker:
    image: ${DOCKER_USERNAME:-deepfake}/deepfake-backend:latest
    container_name: deepfake-celery-worker
    restart: unless-stopped
    command: celery -A app.core.celery worker --loglevel=info
    environment:
      - MONGODB_URL=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/${DATABASE_NAME:-deepfake_detection}?authSource=admin
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - uploads_data:/app/uploads
      - ml_models_data:/app/ml_models
      - cache_data:/app/cache
    depends_on:
      - mongodb
      - redis
    networks:
      - deepfake-network

  # Celery Beat (Optional - for scheduled tasks)
  celery-beat:
    image: ${DOCKER_USERNAME:-deepfake}/deepfake-backend:latest
    container_name: deepfake-celery-beat
    restart: unless-stopped
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      - MONGODB_URL=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/${DATABASE_NAME:-deepfake_detection}?authSource=admin
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - mongodb
      - redis
    networks:
      - deepfake-network

volumes:
  mongodb_data:
    driver: local
  uploads_data:
    driver: local
  ml_models_data:
    driver: local
  cache_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  deepfake-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 